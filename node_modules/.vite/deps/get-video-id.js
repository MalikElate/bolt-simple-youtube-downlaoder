import "./chunk-76J2PTFD.js";

// node_modules/get-video-id/dist/get-video-id.esm.js
function stripParameters(shortcodeString) {
  if (shortcodeString.includes("?")) {
    shortcodeString = shortcodeString.split("?")[0];
  }
  if (shortcodeString.includes("/")) {
    shortcodeString = shortcodeString.split("/")[0];
  }
  if (shortcodeString.includes("&")) {
    shortcodeString = shortcodeString.split("&")[0];
  }
  return shortcodeString;
}
function youtube(youtubeString) {
  var string_ = youtubeString;
  string_ = string_.replace(/#t=.*$/, "");
  string_ = string_.replace(/^https?:\/\//, "");
  var shortcode = /youtube:\/\/|youtu\.be\/|y2u\.be\//g;
  if (shortcode.test(string_)) {
    var shortcodeid = string_.split(shortcode)[1];
    return stripParameters(shortcodeid);
  }
  var shortsUrl = /\/shorts\//g;
  if (shortsUrl.test(string_)) {
    return stripParameters(string_.split(shortsUrl)[1]);
  }
  var parameterv = /v=|vi=/g;
  if (parameterv.test(string_)) {
    var array = string_.split(parameterv);
    return stripParameters(array[1].split("&")[0]);
  }
  var inlinev = /\/v\/|\/vi\/|\/watch\//g;
  if (inlinev.test(string_)) {
    var inlineid = string_.split(inlinev)[1];
    return stripParameters(inlineid);
  }
  var parameterwebp = /\/an_webp\//g;
  if (parameterwebp.test(string_)) {
    var webp = string_.split(parameterwebp)[1];
    return stripParameters(webp);
  }
  var eformat = /\/e\//g;
  if (eformat.test(string_)) {
    var estring = string_.split(eformat)[1];
    return stripParameters(estring);
  }
  var embedreg = /\/embed\//g;
  if (embedreg.test(string_)) {
    var embedid = string_.split(embedreg)[1];
    return stripParameters(embedid);
  }
  var usernamereg = /\/user\/([a-zA-Z\d]*)$/g;
  if (usernamereg.test(string_)) {
    return void 0;
  }
  var userreg = /\/user\/(?!.*videos)/g;
  if (userreg.test(string_)) {
    var elements = string_.split("/");
    return stripParameters(elements.pop());
  }
  var attrreg = /\/attribution_link\?.*v%3D([^%&]*)(%26|&|$)/;
  if (attrreg.test(string_)) {
    return stripParameters(string_.match(attrreg)[1]);
  }
  return void 0;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function vimeo(vimeoString) {
  var string_ = vimeoString;
  if (string_.includes("#")) {
    var _string_$split = string_.split("#");
    var _string_$split2 = _slicedToArray(_string_$split, 1);
    string_ = _string_$split2[0];
  }
  if (string_.includes("?") && !string_.includes("clip_id=")) {
    var _string_$split3 = string_.split("?");
    var _string_$split4 = _slicedToArray(_string_$split3, 1);
    string_ = _string_$split4[0];
  }
  var id;
  var array;
  var event = /https?:\/\/vimeo\.com\/event\/(\d+)$/;
  var eventMatches = event.exec(string_);
  if (eventMatches && eventMatches[1]) {
    return eventMatches[1];
  }
  var primary = /https?:\/\/vimeo\.com\/(\d+)/;
  var matches = primary.exec(string_);
  if (matches && matches[1]) {
    return matches[1];
  }
  var vimeoPipe = ["https?://player.vimeo.com/video/[0-9]+$", "https?://vimeo.com/channels", "groups", "album"].join("|");
  var vimeoRegex = new RegExp(vimeoPipe, "gim");
  if (vimeoRegex.test(string_)) {
    array = string_.split("/");
    if (array && array.length > 0) {
      id = array.pop();
    }
  } else if (/clip_id=/gim.test(string_)) {
    array = string_.split("clip_id=");
    if (array && array.length > 0) {
      var _array$1$split = array[1].split("&");
      var _array$1$split2 = _slicedToArray(_array$1$split, 1);
      id = _array$1$split2[0];
    }
  }
  return id;
}
function vine(string_) {
  var regex = /https:\/\/vine\.co\/v\/([a-zA-Z\d]*)\/?/;
  var matches = regex.exec(string_);
  if (matches && matches.length > 1) {
    return matches[1];
  }
  return void 0;
}
function videopress(urlString) {
  var idRegex;
  if (urlString.includes("embed")) {
    idRegex = /embed\/(\w{8})/;
    return urlString.match(idRegex)[1];
  }
  idRegex = /\/v\/(\w{8})/;
  var matches = urlString.match(idRegex);
  if (matches && matches.length > 0) {
    return matches[1];
  }
  return void 0;
}
function microsoftStream(urlString) {
  var regex = urlString.includes("embed") ? /https:\/\/web\.microsoftstream\.com\/embed\/video\/([a-zA-Z\d-]*)\/?/ : /https:\/\/web\.microsoftstream\.com\/video\/([a-zA-Z\d-]*)\/?/;
  var matches = regex.exec(urlString);
  if (matches && matches.length > 1) {
    return matches[1];
  }
  return void 0;
}
function tiktok(urlString) {
  var basicReg = /tiktok\.com(.*)\/video\/(\d+)/gm;
  var basicParsed = basicReg.exec(urlString);
  if (basicParsed && basicParsed.length > 2) {
    return basicParsed[2];
  }
  return void 0;
}
function dailymotion(urlString) {
  var basicReg = /dailymotion\.com(.*)(video)\/([a-zA-Z\d]+)/gm;
  var basicParsed = basicReg.exec(urlString);
  if (basicParsed) {
    return basicParsed[3];
  }
  var shortRegex = /dai\.ly\/([a-zA-Z\d]+)/gm;
  var shortParsed = shortRegex.exec(urlString);
  if (shortParsed && shortParsed.length > 1) {
    return shortParsed[1];
  }
  var dynamicRegex = /dailymotion\.com(.*)video=([a-zA-Z\d]+)/gm;
  var dynamicParsed = dynamicRegex.exec(urlString);
  if (dynamicParsed && dynamicParsed.length > 2) {
    return dynamicParsed[2];
  }
  return void 0;
}
function getSrc(input) {
  if (typeof input !== "string") {
    throw new TypeError("getSrc expected a string");
  }
  var srcRegEx = /src="(.*?)"/gm;
  var matches = srcRegEx.exec(input);
  if (matches && matches.length >= 2) {
    return matches[1];
  }
  return void 0;
}
function getVideoId(urlString) {
  if (typeof urlString !== "string") {
    throw new TypeError("get-video-id expects a string");
  }
  var string_ = urlString;
  if (/<iframe/gi.test(string_)) {
    string_ = getSrc(string_) || "";
  }
  string_ = string_.trim();
  string_ = string_.replace("-nocookie", "");
  string_ = string_.replace("/www.", "/");
  var metadata = {
    id: null,
    service: null
  };
  if (/\/\/google/.test(string_)) {
    var matches = string_.match(/url=([^&]+)&/);
    if (matches) {
      string_ = decodeURIComponent(matches[1]);
    }
  }
  if (/youtube|youtu\.be|y2u\.be|i.ytimg\./.test(string_)) {
    metadata = {
      id: youtube(string_),
      service: "youtube"
    };
  } else if (/vimeo/.test(string_)) {
    metadata = {
      id: vimeo(string_),
      service: "vimeo"
    };
  } else if (/vine/.test(string_)) {
    metadata = {
      id: vine(string_),
      service: "vine"
    };
  } else if (/videopress/.test(string_)) {
    metadata = {
      id: videopress(string_),
      service: "videopress"
    };
  } else if (/microsoftstream/.test(string_)) {
    metadata = {
      id: microsoftStream(string_),
      service: "microsoftstream"
    };
  } else if (/tiktok\.com/.test(string_)) {
    metadata = {
      id: tiktok(string_),
      service: "tiktok"
    };
  } else if (/(dailymotion\.com|dai\.ly)/.test(string_)) {
    metadata = {
      id: dailymotion(string_),
      service: "dailymotion"
    };
  }
  return metadata;
}
var get_video_id_esm_default = getVideoId;
export {
  get_video_id_esm_default as default
};
/*! Bundled license information:

get-video-id/dist/get-video-id.esm.js:
  (*! get-video-id v3.6.5 | @license MIT Â© Michael Wuergler | https://github.com/radiovisual/get-video-id *)
*/
//# sourceMappingURL=get-video-id.js.map
