{
  "version": 3,
  "sources": ["../../get-video-id/src/youtube.js", "../../get-video-id/src/vimeo.js", "../../get-video-id/src/vine.js", "../../get-video-id/src/videopress.js", "../../get-video-id/src/microsoftstream.js", "../../get-video-id/src/tiktok.js", "../../get-video-id/src/dailymotion.js", "../../get-video-id/src/utils/get-src.js", "../../get-video-id/src/index.js"],
  "sourcesContent": ["/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n\t// Split parameters or split folder separator\n\tif (shortcodeString.includes('?')) {\n\t\tshortcodeString = shortcodeString.split('?')[0];\n\t}\n\n\tif (shortcodeString.includes('/')) {\n\t\tshortcodeString = shortcodeString.split('/')[0];\n\t}\n\n\tif (shortcodeString.includes('&')) {\n\t\tshortcodeString = shortcodeString.split('&')[0];\n\t}\n\n\treturn shortcodeString;\n}\n\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function youtube(youtubeString) {\n\tlet string_ = youtubeString;\n\n\t// Remove time hash at the end of the string\n\tstring_ = string_.replace(/#t=.*$/, '');\n\n\t// Strip the leading protocol\n\tstring_ = string_.replace(/^https?:\\/\\//, '');\n\n\t// Shortcode\n\tconst shortcode = /youtube:\\/\\/|youtu\\.be\\/|y2u\\.be\\//g;\n\n\tif (shortcode.test(string_)) {\n\t\tconst shortcodeid = string_.split(shortcode)[1];\n\t\treturn stripParameters(shortcodeid);\n\t}\n\n\t// Shorts\n\tconst shortsUrl = /\\/shorts\\//g;\n\tif (shortsUrl.test(string_)) {\n\t\treturn stripParameters(string_.split(shortsUrl)[1]);\n\t}\n\n\t// V= or vi=\n\tconst parameterv = /v=|vi=/g;\n\n\tif (parameterv.test(string_)) {\n\t\tconst array = string_.split(parameterv);\n\t\treturn stripParameters(array[1].split('&')[0]);\n\t}\n\n\t// /v/ or /vi/ or /watch/\n\tconst inlinev = /\\/v\\/|\\/vi\\/|\\/watch\\//g;\n\n\tif (inlinev.test(string_)) {\n\t\tconst inlineid = string_.split(inlinev)[1];\n\t\treturn stripParameters(inlineid);\n\t}\n\n\t// Format an_webp\n\tconst parameterwebp = /\\/an_webp\\//g;\n\n\tif (parameterwebp.test(string_)) {\n\t\tconst webp = string_.split(parameterwebp)[1];\n\t\treturn stripParameters(webp);\n\t}\n\n\t// /e/\n\tconst eformat = /\\/e\\//g;\n\n\tif (eformat.test(string_)) {\n\t\tconst estring = string_.split(eformat)[1];\n\t\treturn stripParameters(estring);\n\t}\n\n\t// Embed\n\tconst embedreg = /\\/embed\\//g;\n\n\tif (embedreg.test(string_)) {\n\t\tconst embedid = string_.split(embedreg)[1];\n\t\treturn stripParameters(embedid);\n\t}\n\n\t// ignore /user/username pattern\n\tconst usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n\tif (usernamereg.test(string_)) {\n\t\treturn undefined;\n\t}\n\n\t// User\n\tconst userreg = /\\/user\\/(?!.*videos)/g;\n\n\tif (userreg.test(string_)) {\n\t\tconst elements = string_.split('/');\n\t\treturn stripParameters(elements.pop());\n\t}\n\n\t// Attribution_link\n\tconst attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n\tif (attrreg.test(string_)) {\n\t\treturn stripParameters(string_.match(attrreg)[1]);\n\t}\n\n\treturn undefined;\n}\n", "/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\nexport default function vimeo(vimeoString) {\n\tlet string_ = vimeoString;\n\n\tif (string_.includes('#')) {\n\t\t[string_] = string_.split('#');\n\t}\n\n\tif (string_.includes('?') && !string_.includes('clip_id=')) {\n\t\t[string_] = string_.split('?');\n\t}\n\n\tlet id;\n\tlet array;\n\n\tconst event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n\n\tconst eventMatches = event.exec(string_);\n\n\tif (eventMatches && eventMatches[1]) {\n\t\treturn eventMatches[1];\n\t}\n\n\tconst primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n\n\tconst matches = primary.exec(string_);\n\tif (matches && matches[1]) {\n\t\treturn matches[1];\n\t}\n\n\tconst vimeoPipe = [\n\t\t'https?://player.vimeo.com/video/[0-9]+$',\n\t\t'https?://vimeo.com/channels',\n\t\t'groups',\n\t\t'album',\n\t].join('|');\n\n\tconst vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n\tif (vimeoRegex.test(string_)) {\n\t\tarray = string_.split('/');\n\t\tif (array && array.length > 0) {\n\t\t\tid = array.pop();\n\t\t}\n\t} else if (/clip_id=/gim.test(string_)) {\n\t\tarray = string_.split('clip_id=');\n\t\tif (array && array.length > 0) {\n\t\t\t[id] = array[1].split('&');\n\t\t}\n\t}\n\n\treturn id;\n}\n", "/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function vine(string_) {\n\tconst regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n\tconst matches = regex.exec(string_);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n", "/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function videopress(urlString) {\n\tlet idRegex;\n\n\tif (urlString.includes('embed')) {\n\t\tidRegex = /embed\\/(\\w{8})/;\n\t\treturn urlString.match(idRegex)[1];\n\t}\n\n\tidRegex = /\\/v\\/(\\w{8})/;\n\n\tconst matches = urlString.match(idRegex);\n\n\tif (matches && matches.length > 0) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n", "/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function microsoftStream(urlString) {\n\tconst regex = (urlString.includes('embed'))\n\t\t? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/\n\t\t: /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n\tconst matches = regex.exec(urlString);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n", "/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function tiktok(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed && basicParsed.length > 2) {\n\t\treturn basicParsed[2];\n\t}\n\n\treturn undefined;\n}\n", "/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function dailymotion(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed) {\n\t\treturn basicParsed[3];\n\t}\n\n\t// Parse shortlink\n\tconst shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n\tconst shortParsed = shortRegex.exec(urlString);\n\tif (shortParsed && shortParsed.length > 1) {\n\t\treturn shortParsed[1];\n\t}\n\n\t// Dynamic link\n\tconst dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n\tconst dynamicParsed = dynamicRegex.exec(urlString);\n\tif (dynamicParsed && dynamicParsed.length > 2) {\n\t\treturn dynamicParsed[2];\n\t}\n\n\treturn undefined;\n}\n", "\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\nexport default function getSrc(input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError('getSrc expected a string');\n\t}\n\n\tconst srcRegEx = /src=\"(.*?)\"/gm;\n\tconst matches = srcRegEx.exec(input);\n\n\tif (matches && matches.length >= 2) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n", "import youtube from './youtube.js';\nimport vimeo from './vimeo.js';\nimport vine from './vine.js';\nimport videopress from './videopress.js';\nimport microsoftStream from './microsoftstream.js';\nimport tiktok from './tiktok.js';\nimport dailymotion from './dailymotion.js';\nimport getSrc from './utils/get-src.js';\n\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\nfunction getVideoId(urlString) {\n\tif (typeof urlString !== 'string') {\n\t\tthrow new TypeError('get-video-id expects a string');\n\t}\n\n\tlet string_ = urlString;\n\n\tif (/<iframe/gi.test(string_)) {\n\t\tstring_ = getSrc(string_) || '';\n\t}\n\n\t// Remove surrounding whitespaces or linefeeds\n\tstring_ = string_.trim();\n\n\t// Remove the '-nocookie' flag from youtube urls\n\tstring_ = string_.replace('-nocookie', '');\n\n\t// Remove any leading `www.`\n\tstring_ = string_.replace('/www.', '/');\n\n\tlet metadata = {\n\t\tid: null,\n\t\tservice: null,\n\t};\n\n\t// Try to handle google redirection uri\n\tif (/\\/\\/google/.test(string_)) {\n\t\t// Find the redirection uri\n\t\tconst matches = string_.match(/url=([^&]+)&/);\n\n\t\t// Decode the found uri and replace current url string - continue with final link\n\t\tif (matches) {\n\t\t\t// JavaScript can get encoded URI\n\t\t\tstring_ = decodeURIComponent(matches[1]);\n\t\t}\n\t}\n\n\tif (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: youtube(string_),\n\t\t\tservice: 'youtube',\n\t\t};\n\t} else if (/vimeo/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: vimeo(string_),\n\t\t\tservice: 'vimeo',\n\t\t};\n\t} else if (/vine/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: vine(string_),\n\t\t\tservice: 'vine',\n\t\t};\n\t} else if (/videopress/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: videopress(string_),\n\t\t\tservice: 'videopress',\n\t\t};\n\t} else if (/microsoftstream/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: microsoftStream(string_),\n\t\t\tservice: 'microsoftstream',\n\t\t};\n\t} else if (/tiktok\\.com/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: tiktok(string_),\n\t\t\tservice: 'tiktok',\n\t\t};\n\t} else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: dailymotion(string_),\n\t\t\tservice: 'dailymotion',\n\t\t};\n\t}\n\n\treturn metadata;\n}\n\nexport default getVideoId;\n"],
  "mappings": ";;;AAOA,SAASA,gBAAgBC,iBAAiB;MAErCA,gBAAgBC,SAAS,GAAzB,GAA+B;AAClCD,sBAAkBA,gBAAgBE,MAAM,GAAtB,EAA2B,CAA3B;;MAGfF,gBAAgBC,SAAS,GAAzB,GAA+B;AAClCD,sBAAkBA,gBAAgBE,MAAM,GAAtB,EAA2B,CAA3B;;MAGfF,gBAAgBC,SAAS,GAAzB,GAA+B;AAClCD,sBAAkBA,gBAAgBE,MAAM,GAAtB,EAA2B,CAA3B;;SAGZF;;AAQO,SAASG,QAAQC,eAAe;MAC1CC,UAAUD;AAGdC,YAAUA,QAAQC,QAAQ,UAAU,EAA1B;AAGVD,YAAUA,QAAQC,QAAQ,gBAAgB,EAAhC;MAGJC,YAAY;MAEdA,UAAUC,KAAKH,OAAf,GAAyB;QACtBI,cAAcJ,QAAQH,MAAMK,SAAd,EAAyB,CAAzB;WACbR,gBAAgBU,WAAD;;MAIjBC,YAAY;MACdA,UAAUF,KAAKH,OAAf,GAAyB;WACrBN,gBAAgBM,QAAQH,MAAMQ,SAAd,EAAyB,CAAzB,CAAD;;MAIjBC,aAAa;MAEfA,WAAWH,KAAKH,OAAhB,GAA0B;QACvBO,QAAQP,QAAQH,MAAMS,UAAd;WACPZ,gBAAgBa,MAAM,CAAD,EAAIV,MAAM,GAAf,EAAoB,CAApB,CAAD;;MAIjBW,UAAU;MAEZA,QAAQL,KAAKH,OAAb,GAAuB;QACpBS,WAAWT,QAAQH,MAAMW,OAAd,EAAuB,CAAvB;WACVd,gBAAgBe,QAAD;;MAIjBC,gBAAgB;MAElBA,cAAcP,KAAKH,OAAnB,GAA6B;QAC1BW,OAAOX,QAAQH,MAAMa,aAAd,EAA6B,CAA7B;WACNhB,gBAAgBiB,IAAD;;MAIjBC,UAAU;MAEZA,QAAQT,KAAKH,OAAb,GAAuB;QACpBa,UAAUb,QAAQH,MAAMe,OAAd,EAAuB,CAAvB;WACTlB,gBAAgBmB,OAAD;;MAIjBC,WAAW;MAEbA,SAASX,KAAKH,OAAd,GAAwB;QACrBe,UAAUf,QAAQH,MAAMiB,QAAd,EAAwB,CAAxB;WACTpB,gBAAgBqB,OAAD;;MAIjBC,cAAc;MAEhBA,YAAYb,KAAKH,OAAjB,GAA2B;WACvBiB;;MAIFC,UAAU;MAEZA,QAAQf,KAAKH,OAAb,GAAuB;QACpBmB,WAAWnB,QAAQH,MAAM,GAAd;WACVH,gBAAgByB,SAASC,IAAT,CAAD;;MAIjBC,UAAU;MAEZA,QAAQlB,KAAKH,OAAb,GAAuB;WACnBN,gBAAgBM,QAAQsB,MAAMD,OAAd,EAAuB,CAAvB,CAAD;;SAGhBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GO,SAASM,MAAMC,aAAa;MACtCxB,UAAUwB;MAEVxB,QAAQJ,SAAS,GAAjB,GAAuB;yBACdI,QAAQH,MAAM,GAAd;;AAAXG,cADyB,gBAAA,CAAA;;MAIvBA,QAAQJ,SAAS,GAAjB,KAAyB,CAACI,QAAQJ,SAAS,UAAjB,GAA8B;0BAC/CI,QAAQH,MAAM,GAAd;;AAAXG,cAD0D,gBAAA,CAAA;;MAIxDyB;MACAlB;MAEEmB,QAAQ;MAERC,eAAeD,MAAME,KAAK5B,OAAX;MAEjB2B,gBAAgBA,aAAa,CAAD,GAAK;WAC7BA,aAAa,CAAD;;MAGdE,UAAU;MAEVC,UAAUD,QAAQD,KAAK5B,OAAb;MACZ8B,WAAWA,QAAQ,CAAD,GAAK;WACnBA,QAAQ,CAAD;;MAGTC,YAAY,CACjB,2CACA,+BACA,UACA,OAJiB,EAKhBC,KAAK,GALW;MAOZC,aAAa,IAAIC,OAAOH,WAAW,KAAtB;MAEfE,WAAW9B,KAAKH,OAAhB,GAA0B;AAC7BO,YAAQP,QAAQH,MAAM,GAAd;QACJU,SAASA,MAAM4B,SAAS,GAAG;AAC9BV,WAAKlB,MAAMa,IAAN;;aAEI,cAAcjB,KAAKH,OAAnB,GAA6B;AACvCO,YAAQP,QAAQH,MAAM,UAAd;QACJU,SAASA,MAAM4B,SAAS,GAAG;2BACvB5B,MAAM,CAAD,EAAIV,MAAM,GAAf;;AAAN4B,WAD6B,gBAAA,CAAA;;;SAKzBA;;ACnDO,SAASW,KAAKpC,SAAS;MAC/BqC,QAAQ;MACRP,UAAUO,MAAMT,KAAK5B,OAAX;MAEZ8B,WAAWA,QAAQK,SAAS,GAAG;WAC3BL,QAAQ,CAAD;;SAGRb;;ACRO,SAASqB,WAAWC,WAAW;MACzCC;MAEAD,UAAU3C,SAAS,OAAnB,GAA6B;AAChC4C,cAAU;WACHD,UAAUjB,MAAMkB,OAAhB,EAAyB,CAAzB;;AAGRA,YAAU;MAEJV,UAAUS,UAAUjB,MAAMkB,OAAhB;MAEZV,WAAWA,QAAQK,SAAS,GAAG;WAC3BL,QAAQ,CAAD;;SAGRb;;AChBO,SAASwB,gBAAgBF,WAAW;MAC5CF,QAASE,UAAU3C,SAAS,OAAnB,IACZ,yEACA;MACGkC,UAAUO,MAAMT,KAAKW,SAAX;MAEZT,WAAWA,QAAQK,SAAS,GAAG;WAC3BL,QAAQ,CAAD;;SAGRb;;ACVO,SAASyB,OAAOH,WAAW;MAEnCI,WAAW;MACXC,cAAcD,SAASf,KAAKW,SAAd;MAChBK,eAAeA,YAAYT,SAAS,GAAG;WACnCS,YAAY,CAAD;;SAGZ3B;;ACRO,SAAS4B,YAAYN,WAAW;MAExCI,WAAW;MACXC,cAAcD,SAASf,KAAKW,SAAd;MAChBK,aAAa;WACTA,YAAY,CAAD;;MAIbE,aAAa;MACbC,cAAcD,WAAWlB,KAAKW,SAAhB;MAChBQ,eAAeA,YAAYZ,SAAS,GAAG;WACnCY,YAAY,CAAD;;MAIbC,eAAe;MACfC,gBAAgBD,aAAapB,KAAKW,SAAlB;MAClBU,iBAAiBA,cAAcd,SAAS,GAAG;WACvCc,cAAc,CAAD;;SAGdhC;;ACrBO,SAASiC,OAAOC,OAAO;MACjC,OAAOA,UAAU,UAAU;UACxB,IAAIC,UAAU,0BAAd;;MAGDC,WAAW;MACXvB,UAAUuB,SAASzB,KAAKuB,KAAd;MAEZrB,WAAWA,QAAQK,UAAU,GAAG;WAC5BL,QAAQ,CAAD;;SAGRb;;ACJR,SAASqC,WAAWf,WAAW;MAC1B,OAAOA,cAAc,UAAU;UAC5B,IAAIa,UAAU,+BAAd;;MAGHpD,UAAUuC;MAEV,YAAYpC,KAAKH,OAAjB,GAA2B;AAC9BA,cAAUkD,OAAOlD,OAAD,KAAa;;AAI9BA,YAAUA,QAAQuD,KAAR;AAGVvD,YAAUA,QAAQC,QAAQ,aAAa,EAA7B;AAGVD,YAAUA,QAAQC,QAAQ,SAAS,GAAzB;MAENuD,WAAW;IACd/B,IAAI;IACJgC,SAAS;;MAIN,aAAatD,KAAKH,OAAlB,GAA4B;QAEzB8B,UAAU9B,QAAQsB,MAAM,cAAd;QAGZQ,SAAS;AAEZ9B,gBAAU0D,mBAAmB5B,QAAQ,CAAD,CAAR;;;MAI1B,sCAAsC3B,KAAKH,OAA3C,GAAqD;AACxDwD,eAAW;MACV/B,IAAI3B,QAAQE,OAAD;MACXyD,SAAS;;aAEA,QAAQtD,KAAKH,OAAb,GAAuB;AACjCwD,eAAW;MACV/B,IAAIF,MAAMvB,OAAD;MACTyD,SAAS;;aAEA,OAAOtD,KAAKH,OAAZ,GAAsB;AAChCwD,eAAW;MACV/B,IAAIW,KAAKpC,OAAD;MACRyD,SAAS;;aAEA,aAAatD,KAAKH,OAAlB,GAA4B;AACtCwD,eAAW;MACV/B,IAAIa,WAAWtC,OAAD;MACdyD,SAAS;;aAEA,kBAAkBtD,KAAKH,OAAvB,GAAiC;AAC3CwD,eAAW;MACV/B,IAAIgB,gBAAgBzC,OAAD;MACnByD,SAAS;;aAEA,cAActD,KAAKH,OAAnB,GAA6B;AACvCwD,eAAW;MACV/B,IAAIiB,OAAO1C,OAAD;MACVyD,SAAS;;aAEA,6BAA6BtD,KAAKH,OAAlC,GAA4C;AACtDwD,eAAW;MACV/B,IAAIoB,YAAY7C,OAAD;MACfyD,SAAS;;;SAIJD;;;",
  "names": ["stripParameters", "shortcodeString", "includes", "split", "youtube", "youtubeString", "string_", "replace", "shortcode", "test", "shortcodeid", "shortsUrl", "parameterv", "array", "inlinev", "inlineid", "parameterwebp", "webp", "eformat", "estring", "embedreg", "embedid", "usernamereg", "undefined", "userreg", "elements", "pop", "attrreg", "match", "vimeo", "vimeoString", "id", "event", "eventMatches", "exec", "primary", "matches", "vimeoPipe", "join", "vimeoRegex", "RegExp", "length", "vine", "regex", "videopress", "urlString", "idRegex", "microsoftStream", "tiktok", "basicReg", "basicParsed", "dailymotion", "shortRegex", "shortParsed", "dynamicRegex", "dynamicParsed", "getSrc", "input", "TypeError", "srcRegEx", "getVideoId", "trim", "metadata", "service", "decodeURIComponent"]
}
